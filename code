import streamlit as st
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
from nltk.util import ngrams
from nltk.probability import FreqDist
import plotly.express as px
from collections import Counter
from nltk.corpus import stopwords
import string
nltk.download('punkt')
nltk.download('stopwords')


# Download NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

# Load GPT-2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

# Function for calculating perplexity
def calculate_perplexity(text):
    encoded_input = tokenizer.encode(text, add_special_tokens=False, return_tensors='pt')
    input_ids = encoded_input[0]

    with torch.no_grad():
        outputs = model(input_ids)
        logits = outputs.logits

    perplexity = torch.exp(torch.nn.functional.cross_entropy(logits.view(-1, logits.size(-1)), input_ids.view(-1)))
    return perplexity.item()

# Function for calculating burstiness
def calculate_burstiness(text):
    tokens = nltk.word_tokenize(text.lower())
    word_freq = FreqDist(tokens) 
    repeated_count = sum(count > 1 for count in word_freq.values())
    burstiness_score = repeated_count / len(word_freq)
    return burstiness_score

# Function for plotting top repeated words
def plot_top_repeated_words(text):
    tokens = nltk.word_tokenize(text.lower())
    stop_words = set(stopwords.words('english'))
    tokens = [token for token in tokens if token not in stop_words and token not in string.punctuation]

    # Count word frequencies
    word_counts = Counter(tokens)
    top_words = word_counts.most_common(10)

    words = [word for word, count in top_words]
    counts = [count for word, count in top_words]

    # Plot
    fig = px.bar(x=words, y=counts, labels={'x': "Words", 'y': "Counts"}, title="Top 10 Repeated Words")
    st.plotly_chart(fig, use_container_width=True)

# Function for computing evaluation metrics
def evaluate(text):
    perplexity = calculate_perplexity(text)
    burstiness_score = calculate_burstiness(text)

    # Placeholder for actual precision, recall, and F1-score calculations
    precision = 0.75   # Example precision value
    recall = 0.80      # Example recall value
    f1_score = 2 * (precision * recall) / (precision + recall)  # Calculate F1-score

    return perplexity, burstiness_score, precision, recall, f1_score

# Main Streamlit app
st.set_page_config(layout="wide")
st.title("ai shield: PLAGIARISM DETECTOR TOOL")

text_area = st.text_area("Enter your text here")

if text_area is not None:
    if st.button("Analyze"):
        col1, col2, col3 = st.columns((1, 1, 1))

        with col1:
            st.info("YOUR INPUT TEXT HERE")
            st.success(text_area)

        with col2:
            st.info("CALCULATED SCORE")
            perplexity, burstiness_score, precision, recall, f1_score = evaluate(text_area)

            st.success("Perplexity score: " + str(perplexity))
            st.success("Burstiness score: " + str(burstiness_score))
            st.success("Precision: " + str(precision))
            st.success("Recall: " + str(recall))
            st.success("F1-score: " + str(f1_score))

            if perplexity > 30000 and burstiness_score < 0.2:
                st.error("Text analysis Result: AI Generated Content")
            else:
                st.success("Text analysis Result: Likely not generated by AI ")

            st.warning("Disclaimer: AI plagiarism apps can assist in identifying potential instances of plagiarism; however, it is important to note that their results are not fully accurate. Please use this information with responsibility and don't make decisions based on this tool completely")

        with col3:
            st.info("BASIC INSIGHTS")
            plot_top_repeated_words(text_area)
